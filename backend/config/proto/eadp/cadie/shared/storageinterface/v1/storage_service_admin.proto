syntax = "proto3";

package eadp.cadie.shared.storageinterface.v1;

import "eadp/cadie/shared/storageinterface/v1/asset_url.proto";
import "eadp/cadie/shared/storageinterface/v1/asset_status.proto";
import "eadp/cadie/shared/storageinterface/v1/asset_upload.proto";
import "eadp/cadie/shared/storageinterface/v1/asset_creation.proto";
import "eadp/cadie/shared/storageinterface/v1/asset_identifier.proto";
import "eadp/cadie/shared/storageinterface/v1/asset_embargo_status.proto";
import "eadp/common/v2/player_id.proto";

option java_multiple_files = true;
option java_package = "eadp.cadie.shared.storageinterface.v1";
option java_outer_classname = "AssetStorageServiceProto";

/**
  * Binary Storage Service (BSS) APIs for CADIE as a client
  * While CADIE defines the set of APIs in one complete service, the option is given to the storage to specify different URLs per rpc method
  * when configuring the message in `eadp.cadie.shared.storageinterface.v1.binary_asset.proto`
  * These APIs will be called by CADIE who will be responsible for Auth N/Z, hence the "admin" status of this service
  * Binary Storage Services can configure different URL for different methods, and return a 421 Misdirected Request if the method is not supported on that endpoint

  * AuthN/Z: CADIE will call with its own JWT + POP in the expected headers so the BSS can approve CADIE's action
  * CADIE will also send the initial caller's JWT in the `X-Original-JWT` header, withOUT the POP (even if the JWT says the POP should come) so the BSS can authZ the caller
  * CADIE will have performed the JWT + POP (dedicated to CADIE's sid) before making the call to the BSS
 */
service AssetStorageService {

  /**
   * For each asset in the batch:
   * If the asset doesn't exist, return its identifier in the failed_identifiers list
   * This API also serves to know if the asset exists
   */
  rpc BatchGetSignedUrls(BatchGetSignedUrlsRequest) returns (BatchGetSignedUrlsResponse);
  rpc BatchGetUnsignedUrls(BatchGetUnsignedUrlsRequest) returns (BatchGetUnsignedUrlsResponse);

  rpc BatchGetEmbargoStatus(BatchGetEmbargoStatusRequest) returns (BatchGetEmbargoStatusResponse);

  rpc BatchUpdateStatuses(BatchUpdateStatusesRequest) returns (BatchUpdateStatusesResponse);
  rpc BatchDeleteAssets(BatchDeleteAssetsRequest) returns (BatchDeleteAssetsResponse);

  /**
   * For each asset in the batch:
   * if an asset exists, return an upload URL to update it
   * If it doesn't exist, return an upload URL to create it
   * If a creation/update is ongoing (i.e. the asset is not yet finalized), return an upload URL to continue the creation/update
   */
  rpc BatchCreateAssets(BatchCreateAssetsRequest) returns (BatchCreateAssetsResponse);

  /**
  * For each asset in the batch:
  * If the asset is not yet finalized, finalize it, if a malware scan is expected, return its identifier in the asset_identifiers_awaiting_confirmation list
  * If the asset is finalized and the malware scan is done or not needed, do nothing
  * If the asset is deleted/not found, return its identifier in the failed_identifiers list
  * If the asset has been finalized but the malware scan is still pending, return its identifier in the asset_identifiers_awaiting_confirmation list
  */
  rpc BatchFinalizeAssets(BatchFinalizeAssetsRequest) returns (BatchFinalizeAssetsResponse);
}

message BatchGetSignedUrlsRequest {
  repeated AssetIdentifier identifiers = 1;
  int32 ttl_secs = 2; //Minimum validity time for the URL
}

message BatchGetSignedUrlsResponse {
  repeated AssetURL asset_urls = 1;
}

message BatchGetUnsignedUrlsRequest {
  repeated AssetIdentifier identifiers = 1;
}

message BatchGetUnsignedUrlsResponse {
  repeated AssetURL asset_urls = 1;
}

message BatchGetEmbargoStatusRequest {
  repeated AssetIdentifier identifiers = 1;
}

message BatchGetEmbargoStatusResponse {
  repeated AssetEmbargoStatus embargo_statuses = 1;
}

message BatchUpdateStatusesRequest {
  repeated AssetIdentifier identifiers = 1;
  AssetStatus status = 2;
  //  [Optional] free text to tell if i's because of moderation that the asset is deactivated, for tracking purposes
  string reason = 3;
}

message BatchUpdateStatusesResponse {
  repeated AssetIdentifier failed_identifiers = 1;
}

message BatchDeleteAssetsRequest {
  repeated AssetIdentifier identifiers = 1;
  //  [Optional] free text to tell if i's because of CSAM that the asset is deleted, for tracking purposes
  string reason = 2;
}

message BatchDeleteAssetsResponse {
  repeated AssetIdentifier failed_identifiers = 1;
}

message BatchCreateAssetsRequest {
  repeated AssetCreation assets = 1;
  AssetStatus status = 2;
  eadp.common.v2.PlayerId player_id = 3;
}

message BatchCreateAssetsResponse {
  repeated AssetUpload upload_urls = 1;
}

message BatchFinalizeAssetsRequest {
  repeated AssetIdentifier identifiers = 1;
}

message BatchFinalizeAssetsResponse {
  repeated AssetIdentifier failed_identifiers = 1;
  //This is the list of asset identifiers who will get a malware scan/integrity check and THEN a notification from the BSS to CADIE
  repeated AssetIdentifier asset_identifiers_awaiting_confirmation = 2;
}